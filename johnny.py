# requires: captcha-solver

import time  # time.time() –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –±–æ–Ω—É—Å–∞, –±–∏–∑–Ω–µ—Å–∞ –∏ –¥—Ä
import random
import logging
import asyncio
import io

from math import floor
from datetime import timedelta

from telethon import types
from captcha_solver import CaptchaSolver
from .. import loader, utils

logger = logging.getLogger("AutoLesya")

lesya = 757724042  # ID –±–æ—Ç–∞
lesya_chat = 1462806544

TLG_JOHNNY = 419089999

times = {
	"bonus": 0,
	"vip_bonus": 0,
	"premium_bonus": 0,
	"premium_money": 0,

	"work": 0,
	"fight": 0,

	"pet_bitcoin": 0,
	"pet_stimulator": 0,
	"pet_food": 0,
	"pet_cases": 0,

	"clan_war": 0,
	"clan_war_upgrade": 0,
	"clan_heist": 0,

	"trade": 0,
	"cup": 0,
	"casino": 0
}

stats = {}

formats = {
	"bonus": ("–±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", "–±–æ–Ω—É—Å —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω", "—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å v.i.p –±–æ–Ω—É—Å", "—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å premium –±–æ–Ω—É—Å"),
	"bonus_money": "–ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑",

	"work": "–≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑",
	"work_new": "üí° –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞!",

	"id": "üîé id: ",

	"banned": "–≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞"
}

settings_tip = {
	"no_fight": "ü§∫ –ë–æ–π",
	"no_job": "üëî ÔøΩ –∞–±–æ—Ç–∞",
	"no_bonus": "üîî –ë–æ–Ω—É—Å",

	"pet_bitcoin": "üÖ±Ô∏è –°–±–æ—Ä –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π",
	"pet_stimulator": "üíä –°—Ç–∏–º—É–ª—è—Ç–æ—Ä –ø–∏—Ç–æ–º—Ü–µ–≤",
	"pet_food": "ü•´ –ö–æ—Ä–º –ø–∏—Ç–æ–º—Ü–µ–≤",
	"pet_cases": "üíº –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–µ–π—Å–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤",

	"clan_war": "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã",
	"clan_heist": "üî´ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ",
	"no_clanbuy": "üí∏ –ó–∞–∫—É–ø –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è",

	"auto_trade": "üîß –¢—Ä–µ–π–¥ –Ω–∞ –≤—Å—ë",
	"auto_cup": "ü•§ –°—Ç–∞–∫–∞–Ω –Ω–∞ –≤—Å—ë",
	"auto_casino": "üé∞ –ö–∞–∑–∏–Ω–æ –Ω–∞ –≤—Å—ë"
}

settings = {}


def convert(str_):
	arr = str_.split(":")
	last = len(arr)
	try:
		if last == 4:  # D:H:M:S
			return int(arr[0][:2]) * 86400 + int(arr[1][:2]) * 3600 + int(arr[2][:2]) * 60 + int(arr[3][:2])
		elif last == 3:  # H:M:S
			return int(arr[0][:2]) * 3600 + int(arr[1][:2]) * 60 + int(arr[2][:2])
		elif last == 2:
			return int(arr[0][:2]) * 60 + int(arr[1][:2])
		else:
			return int(arr[0][:2])
	except ValueError:
		logger.error(f"CONVERT ERROR WHILE PARSING {str_!r}")
		return -1

def timetostr(tmp):
	if tmp <= 0:
		return "–ì–æ—Ç–æ–≤–æ"
	return str(timedelta(seconds=floor(tmp)))


@loader.tds
class AutoLesyaMod(loader.Module):
	"""–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è LesyaBot"""
	strings = {"name": "LesyaBot"}

	def gen_time(self):
		return random.randint(0, self.db_get("cooldown_time", 10))

	async def send_bot(self, text):
		# await asyncio.sleep(random.randint(0, self.db_get("cooldown_time", 10)))
		await self._client.send_message(lesya, text)

	async def send_group(self, text):
		await self._client.send_message(lesya_chat, text)

	def set_time(self, time_name, entry):
		global times
		times[time_name] = entry
		self.db_set("time_" + time_name, entry)

	def bot_loaddb(self):
		# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
		global times
		for time_name in times:
			last = self.db_get("time_" + time_name, 0)
			times[time_name] = last
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ lsettings
		global settings
		for cmd in settings_tip:
			has = self.db_get(cmd)
			settings[cmd] = has
	
	def solver(self, data):
		key = self.db_get("api_token")
		func = CaptchaSolver("rucaptcha", api_key=key).solve_captcha
		return func(data)

	async def client_ready(self, client, db):
		self._me = await client.get_me()
		self._client = client
		self._db = db
		self.bot_loaddb()
		await self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å")
		await asyncio.sleep(1)
		asyncio.ensure_future(self.timer())

	async def setcaptchatokencmd(self, message):
		"""–£–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω RuCaptcha"""
		api_token = utils.get_args_raw(message)
		self.db_set("api_token", api_token)
		await utils.answer(message, "<b>–ï—Å—Ç—å!</b>")

	async def setcooldowncmd(self, message):
		"""–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, —Å—Ç–∞–Ω–¥–∞—Ä—Ç - 10)"""
		try:
			cd_time = int(utils.get_args_raw(message))
		except ValueError:
			await utils.answer(message, "<b>–û—à–∏–±–∫–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ \"s\", –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)</b>")
			return
		self.db_set("cooldown_time", cd_time)
		await utils.answer(message, "<b>–ï—Å—Ç—å!</b>")

	def settings_set(self, name, var):
		global settings
		settings[name] = var
		self.db_set(name, var)

	async def lsettingscmd(self, message):
		"""–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LesyaBot"""
		text = utils.get_args_raw(message)
		reply = ""
		if not text or not settings_tip.get(text):
			reply = "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>"
			for cmd in settings_tip:
				enabled = self.db_get(cmd) and "‚ôøÔ∏è" or ""
				description = settings_tip[cmd]
				reply = reply + "\n" + enabled + description + " - <code>" + cmd + "</code>"

			reply = reply + "\n\n" + "<b>‚ôø - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞\n–§—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∏–ø–∏—Å–∫–æ–π</b> <code>no_</code> <b>–ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è</b>\n\n<b>–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–≤–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ</b> <code>.lsettings var_name</code>"
		else:
			description = settings_tip.get(text)
			should = not settings.get(text)
			reply = description + " - <b>" + (should and "–í–∫–ª—é—á–µ–Ω–æ" or "–û—Ç–∫–ª—é—á–µ–Ω–æ") + "</b>"
			self.settings_set(text, should)
			
		await message.edit(reply)

	async def solvecmd(self, message):
		"""–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
		await message.edit("–ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞...")
		x = await self.solve_captcha(await message.get_reply_message())
		await message.edit(("–û—Ç–≤–µ—Ç: "+str(x)) if x else "<b>–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á —Å –ø–æ–º–æ—â—å—é .setcaptchatoken</b>")

	async def lesyainfocmd(self, message):
		"""–ò–Ω–æ—Ñ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω—Ñ–µ, –∫–∞–∫—É—é —Å–æ–±—Ä–∞–ª"""
		if not stats.get("has", None):
			await message.edit("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>")
			return

		now = time.time()
		text = "<b>–ò–Ω—Ñ–∞ –≤ –ë–æ—Ç –õ–µ—Å—è</b>" + "\n" \
			"‚ò∫Ô∏è –ú–æ–π –∞–π–¥–∏ - <code>" + str(stats.get("id")) + "</code>\n" \
			"ü§î –°—Ç–∞—Ç—É—Å: " + (stats.get("premium") and "Premium" or stats.get("vip") and "VIP" or "–ò–≥—Ä–æ–∫") + "\n" \
			"üë®‚Äçüë¶‚Äçüë¶ –ö–ª–∞–Ω: " + (stats.get("clan") and "–ï—Å—Ç—å" or "–ù–µ—Ç—É") + "\n" \
			"üíª –§–µ—Ä–º—ã: " + (stats.get("bitcoin") and "–ï—Å—Ç—å" or "–ù–µ—Ç—É") + "\n\n" \
			"<b>–ò–Ω—Ñ–∞ –ø–æ —Ç–∞–π–º–∏–Ω–≥–∞–º</b>" + "\n" \
			"üí∞ –ë–æ–Ω—É—Å: " + timetostr(times.get("bonus") - now) + "\n"
		if stats.get("vip"):
			text = text + "üí≥ –í–∏–ø –±–æ–Ω—É—Å: " + timetostr(times.get("vip_bonus") - now) + "\n"
		if stats.get("premium"):
			text = text + "üí∏ –ü—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å: " + timetostr(times.get("premium_bonus") - now) + "\n"
			text = text + "ü§ë –ü—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞: " + timetostr(times.get("premium_money") - now) + "\n"
		if stats.get("work"):
			text = text + "ÔøΩ Ô∏è ÔøΩ –∞–±–æ—Ç–∞: " + timetostr(times.get("work") - now) + "\n"
		battle = times.get("fight") - now
		if battle < 10**50:
			text = text + "ü§∫ –ë–æ–∏: " + timetostr(battle) + "\n"
		if settings.get("pet_stimulator"):
			text = text + "üíä –°—Ç–∏–º—É–ª—è—Ç–æ—Ä—ã: " + timetostr(times.get("pet_stimulator") - now) + "\n"
		if settings.get("pet_food"):
			text = text + "ü•´ –ö–æ—Ä–º: " + \
				timetostr(times.get("pet_food") - now) + "\n"
		if settings.get("pet_cases"):
			text = text + "üíº –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–µ–π—Å–æ–≤: " + timetostr(times.get("pet_cases") - now) + "\n"
		if settings.get("clan_war"):
			text = text + "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞: " + timetostr(times.get("clan_war") - now) + "\n"
			if times.get("clan_war_upgrade") != 0:
				text = text + "ü¶Ω –ê–ø–≥—Ä–µ–π–¥ –ø–∏—Ç–æ–º—Ü–µ–≤: " + timetostr(times.get("clan_war_upgrade") - now) + "\n"
		if settings.get("clan_heist"):
			text = text + "üî´ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ: " + timetostr(times.get("clan_heist") - now) + "\n"
		if self.db_get("api_token") == None:
			text = text + "ÔøΩ Ô∏è <b>–¢–æ–∫–µ–Ω –∫–∞–ø—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω</b>"
		await message.edit(text)

	async def solve_captcha(self, message):
		if not self.solver:
			return
		file_loc = io.BytesIO()
		await message.download_media(file_loc)
		bytes_ = file_loc.getvalue()
		return self.solver(bytes_)

	async def parseprofile(self, text):
		global stats
		stats["has"] = True
		id_format = formats.get("id")
		id_str = text.find(id_format)
		id_start = id_str + len(id_format)
		id_end = text.find("\n", id_start)
		stats["id"] = text[id_start:id_end] or "null"
		stats["premium"] = "—Å—Ç–∞—Ç—É—Å: premium" in text
		stats["vip"] = "—Å—Ç–∞—Ç—É—Å: v.i.p" in text or "—Å—Ç–∞—Ç—É—Å: premium" in text
		stats["work"] = "—Ä–∞–±–æ—Ç–∞:" in text
		stats["clan"] = "–∫–ª–∞–Ω:" in text
		stats["bitcoin"] = "—Ñ–µ—Ä–º–∞:" in text
		logger.info("Got profile")

	def parsebonus(self, text):
		print("parsing bonus")
		print(text)
		global times
		vip = "v.i.p" in text
		premium = "premium" in text
		bonus_type = vip and "vip_bonus" or premium and "premium_bonus" or "bonus"
		now = time.time()

		timestr = text.rsplit(" ", 2)
		if ":" not in (timestr[-1]):
			timestr.pop(-1)
		need = convert(timestr[-1])
		self.set_time(bonus_type, now + need + 30)
		print("before bonus need to wait " + str(need))

	def parsemoneybonus(self, text):
		print("parsing money bonus")
		print(text)
		global times
		now = time.time()

		timestr = text.rsplit(" ", 2)
		if ":" not in (timestr[-1]):
			timestr.pop(-1)
		need = convert(timestr[-1])
		self.set_time("premium_money", now + need + 30)
		print("before money bonus need to wait " + str(need))

	def parsejob(self, text):  # –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
		global times
		now = time.time()

		line = text.split("\n")[1]
		timestr = line.rsplit(" ", 1)[1]
		need = convert(timestr)
		self.set_time("work", now + need + self.gen_time())
		logger.info("before work need to wait " + str(need))

	def parse_last_entry(self, text):
		last = "1"
		lines = text.split("\n")
		for line in lines:
			dot = line.find(".")
			if line[:1] == "üîπ" and dot != -1:
				last = line[2:dot]
		return str(last)

	def parsenewjob(self, text):
		last = self.parse_last_entry(text)
		asyncio.ensure_future(self.send_bot("ÔøΩ –∞–±–æ—Ç–∞ " + last))
		

	def parsefights(self, text):
		global times
		if not "–ª–µ—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤" in text:
			return False
		logger.info("Tring to parse fight time")
		lines = text.split("\n")
		times_ = []
		for _ in range(len(lines)):
			if "–ª–µ—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤" in lines[0]:
				lines.pop(0)
				break
			lines.pop(0)
		for line in lines:
			if ":" in line:
				timestr = line.rsplit(" ", 1)[1]
				if ":" in timestr:
					val = convert(timestr)
					times_.append(val if val else 0)
		logger.info("Calculated fight time")
		self.set_time("fight", time.time() + max(times_) + 2 + self.gen_time())
		return len(times_) > 0

	def get_bitcoins(self):
		now = time.time()
		if not settings.get("pet_bitcoin") or times.get("pet_bitcoin") > now:
			return
		self.set_time("pet_bitcoin", now + 60 * 61)
		asyncio.ensure_future(self.send_bot("–§–µ—Ä–º–∞"))

	async def case_testcmd(self, reply):
		if not reply:
			self.send_bot("<b>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!</b>")
		text = reply.message
		text = text.lower()
		lines = text.split("\n")
		case = {}
		msg = ""
		for line in lines:
			print(line)
			if "üîπ " in line and ". " in line:
				start = line.find("üîπ ")
				end = line.find(". ")
				has = line[start+1:end]
				has = int(has)
				msg = msg+has+"\n"

	def war_parsepoints(self, text):
		text = text.lower()
		lines = text.split("\n")
		max_upgrade = 16
		pets = {}
		points = 0
		for line in lines:
			print(line)
			if "–¥–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π:" in line:
				print("found line")
				pos = line.find(":")
				points = line[pos + 2:]
				print(points)
				points = int(points)
			elif "üíé" in line and "/" in line:
				start = line.find("‚≠ê")
				end = line.find("/")
				has = line[start+1:end]
				has = int(has)
				pets[len(pets) + 1] = has
		test = []
		for pet in pets:
			has = pets[pet]
			pet = str(pet)
			if has == max_upgrade:
				continue
			for up_id in range(max_upgrade - has):
				if points <= 0:
					break
				upgrade = has + up_id + 1
				to_send = "–ö–≤ —É–ª—É—á—à–∏—Ç—å " + pet + " " + str(upgrade)
				points -= 1
				test.append(to_send)
		return test
	
	async def war_usepoints(self, text):
		info = self.war_parsepoints(text)
		for st in info:
			await self.send_bot(st)

	async def war_testcmd(self, message):
		self.set_time("clan_war_upgrade", 1)
		await message.edit("–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç")

	async def receive(self, message):  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
		global times
		global stats
		text = message.text.lower()
		now = time.time()
		if not text:
			return
		if "[üíé] premium" in text:
			text = text.replace("[üíé] ", "")
		# –ò–Ω—Ñ–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
		if "–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å" in text:  # –ò–Ω—Ñ–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø—Ä–∏–≤–µ—Ç
			await self.parseprofile(text)

		if formats.get("banned") in text and not times.get("banned", None):
			logger.info("banned. Getting time")
			skip = len(formats.get("banned"))
			lines = text.split("\n")
			line = lines[0]
			reason = lines[1]
			need = convert(line[2+skip+1:])
			self.set_time("banned", now + need + 60)
			logger.info("Got ban time. Waiting " + str(need))
			await self._client.send_message(lesya_chat, "#ban\n<b>üö´ –Ø —É–ª–µ—Ç–µ–ª –≤ –±–∞–Ω. –í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ " + timetostr(need) + " —Å–µ–∫—É–Ω–¥</b>\n" + reason)
			return

		# –ï—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ—É
		if not stats.get("has"):
			return
		# ÔøΩ –∞—Å—á—ë—Ç –¥–µ–π—Å—Ç–≤–∏–π

		# –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã
		# –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
		if formats.get("work") in text:
			logger.info("Parsing job")
			self.parsejob(text)
		elif ", —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω" in text:
			times["work"] = now + self.gen_time()

			# –ê–≤—Ç–æ–ø–æ–≤—ã—à–µ–Ω–∏–µ
		if not stats.get("no_work"):
			if formats.get("work_new") in text:
				logger.info("Parsing new job")
				stats["new_job"] = True
				await self.send_bot("–£–≤–æ–ª–∏—Ç—å—Å—è")
				await self.send_bot("ÔøΩ –∞–±–æ—Ç–∞")
			elif stats.get("new_job") and "–º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ä–∞–±–æ—Ç:" in text:
				logger.info("looking job list")
				self.parsenewjob(text)
			elif stats.get("new_job") and ", –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏" in text:
				logger.info("looking job in job list")
				stats["new_job"] = None
				self.parsenewjob(text)
			elif ", –≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ" in text:
				stats["new_job"] = True
				await self.send_bot("ÔøΩ –∞–±–æ—Ç–∞")

		# –ë–æ–Ω—É—Å
		for btext in formats.get("bonus"):
			if btext in text:
				self.parsebonus(text)
				logger.info("Parsing bonus")

		# –ê–≤—Ç–æ–≤–∞–ª—é—Ç–∞ –ø—Ä–µ–º–∏—É–º–∞
		if formats.get("bonus_money") in text:
			times["bonus_money"] = now + 5
			self.parsemoneybonus(text)
			logger.info("Parsing money bonus")

		# –ê–≤—Ç–æ–∑–∞–∫—É–ø –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏–π
		if stats.get("need_to_buy") and ", –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è:" in text:
			msg = stats.get("need_to_buy")
			stats["need_to_buy"] = None
			lines = text.split("\n")
			for line in lines:
				dot = line.find(".")
				if line[:1] == "üî∏" and dot != -1:
					await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã " + line[2:dot])
			await msg.reply("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ")
		elif stats.get("need_to_buy") and ", —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª–∞–Ω–∞" in text:
			msg = stats.get("need_to_buy")
			stats["need_to_buy"] = None
			await msg.reply("–î—É—Ä–∞–∫, –º–µ–Ω—è –≤ –∫–ª–∞–Ω–µ –Ω–µ—Ç—É")

		# –ê–≤—Ç–æ–±–æ–π –ø–∏—Ç–æ–º—Ü–µ–≤
		if "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏" in text or "–≤–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã –ø–æ–±–µ–¥–∏–ª–∏" in text:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–æ—è
			if not self.parsefights(text[1:]):
				times["fight"] = now + self.gen_time()
				logger.info("Gonna start new fight soon")
		elif ", –≤—ã –Ω–∞–ø–∞–ª–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞" in text or ", —Ç–µ–∫—É—â–∏–π –±–æ–π:" in text or ", –í–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö" in text:
			self.set_time("fight", now + 60 * 10)
			logger.info("There is battle/waiting. Gonna wait 10 min before the fight")
		elif ", –Ω–∞–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –æ—Ç—Ä—è–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã" in text or ", –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–∏—Ç–≤—ã –Ω—É–∂–Ω—ã –ø–∏—Ç–æ–º—Ü—ã" in text:
			times["fight"] = now + 10**100
			logger.info("I don't have pets. No sense for fighting")
		elif ", —Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º –æ—Ç—Ä—è–¥–µ" in text:
			times["fight"] = now + self.gen_time()
		# –ö–∞–ø—á–∞ –æ—Ç –±–æ—Ç–∞ ( –æ–¥–∏–Ω —Ä–∞–∑ –º–Ω–µ –ø—Ä–∏—Å–ª–∞–ª )
		if "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏" in text:
			stats["captcha"] = True
			logger.info("Solving captcha from bot")
			code = await self.solve_captcha(message)
			logger.info("Sending captcha response")
			await self.send_bot(code)
			logger.info("Sending captcha response done")
			stats["captcha"] = None
			logger.info("AFTER CAPTCHA-IF")

		if settings.get("clan_heist"):
			if ", –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏" in text: # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				if "–≤—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: –ø–ª–∞–Ω–∞ –Ω–µ—Ç":
					lines = text.split("\n")
					last = lines[-1]
					timestr = last.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_heist", now + wait)
					asyncio.ensure_future(self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1"))
				elif "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞..." in text:
					asyncio.ensure_future(self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç"))
				else:
					lines = text.split("\n")
					last = lines[-1]
					timestr = last.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_heist", now + wait + 60)
			elif ", –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è:"  in text: # –í—ã–±–æ—Ä –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
				last = self.parse_last_entry(text) # –ò—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
				asyncio.ensure_future(self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ " + last)) # –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ
			elif ", –≤—ã –Ω–∞—á–∞–ª–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ" in text and "–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è" in text: # –í—ã–±–æ—Ä –ø–ª–∞–Ω–∞
				lines = text.split("\n")
				for ltext in lines:
					if "–≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É:" in text:
						timestr = ltext.rsplit(" ", 1)[1]
						if timestr and ":" in timestr:
							wait = convert(timestr)
							self.set_time("clan_heist", now + wait + 60)
				asyncio.ensure_future(self.send_group("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ø–ª–∞–Ω 1"))
			elif ", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!" in text or ", –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å" in text: # –ü–æ—Å–ª–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç / –ö–æ–≥–¥–∞ —É–∂–µ –∏–¥—ë—Ç, –∞ —Ç—ã –ø—Ä–æ–ø–∏—Å–∞–ª —Å—Ç–∞—Ä—Ç
				line = text.split("\n")[1]
				timestr = line.rsplit(" ", 1)[1]
				if timestr and ":" in timestr:
					wait = convert(timestr)
					self.set_time("clan_heist", now + wait + 60)

		if settings.get("clan_war"):
			if ", –∫–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞" in text:
				asyncio.ensure_future(self.send_bot("–ö–≤ —Å—Ç–∞—Ä—Ç"))
				self.set_time("clan_war", now + 60)
			elif ", –≤—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!" in text:
				self.set_time("clan_war", now + 1800)
			elif ", –≤–æ–π–Ω–∞ –∫–ª–∞–Ω–æ–≤ –Ω–∞—á–∞—Ç–∞!" in text: # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–ª–∏ —É–∂–µ —Å—Ä–∞–∂–µ–Ω–∏–µ
				if "–¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ø–∞:" in text: # –ò–¥—ë—Ç —Å–±–æ—Ä –ø–∏—Ç–æ–º—Ü–µ–≤ —Å –±–æ—ë–≤. –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
					line = text.split("\n")[-1]
					timestr = line.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_war", now + wait + 60)
				elif "—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞ —á–µ—Ä–µ–∑:" in text:
					line = text.split("\n")[-2]
					timestr = line.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_war", now + wait + 60)
						upgrade = times.get("clan_war_upgrade")
						if now > upgrade and upgrade != 0:
							if (wait - 600) > 0:
								self.set_time("clan_war_upgrade", now + wait - 600)
							else:
								self.set_time("clan_war_upgrade", 0)
							if "–¥–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π:" in text:
								await self.war_usepoints(text)
						elif (now + wait - 600) > 0:
							self.set_time("clan_war_upgrade", now + wait - 600)
				elif "–∫–æ–Ω–µ—Ü –≤–æ–π–Ω—ã —á–µ—Ä–µ–∑:" in text: # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
					line = text.split("\n")[-2] # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ü–∞ - –∫–æ–Ω–µ—Ü –≤–æ–π–Ω—ã
					timestr = line.rsplit(" ", 1)[1]
					if timestr and ":" in timestr:
						wait = convert(timestr)
						self.set_time("clan_war", now + wait + 60)


		# –°–±–æ—Ä –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫ –ø—Ä–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ/–∞–≤—Ç–æ—Å—Ç–∞–∫–∞–Ω–µ
		if settings.get("auto_trade"):
			if "‚úÖ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ +" in text:
				times["trade"] = now + self.gen_time() + 1
				asyncio.ensure_future(self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ"))
			elif "‚ùå  –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏" in text:
				times["trade"] = now + self.gen_time()

		if settings.get("auto_cup"):
			if ", –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ø—Ä–∏–∑ " in text or ", –≤–µ—Ä–Ω–æ! –ø—Ä–∏–∑ " in text or ", –≤—ã —É–≥–∞–¥–∞–ª–∏! –ø—Ä–∏–∑ " in text:
				times["cup"] = now + self.gen_time() + 1
				asyncio.ensure_future(self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ"))
			elif ", –Ω–µ–≤–µ—Ä–Ω–æ, —ç—Ç–æ –±—ã–ª " in text and "-–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫" in text:
				times["cup"] = now + self.gen_time()
				# rel
		
		if settings.get("auto_casino"):
			if ", –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏" in text:
				times["casino"] = now + self.gen_time()
			elif ", –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏" in text:
				asyncio.ensure_future(self.send_bot("–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å–µ"))
				times["casino"] = now + self.gen_time() + 1

	async def receivechat(self, message):  # —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ —Å –±–æ—Ç–æ–º
		global stats
		text = message.text.lower()
		user_id = message.from_id or 0

		if (", –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω ‚Ññ" in text) and not stats.get("no_clanbuy") and user_id == lesya and stats.get("clan"):
			stats["need_to_buy"] = message
			await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã")

		if (text == "!–∑–∞–∫—É–ø"):
			if user_id != TLG_JOHNNY:
				await utils.answer(message, "–ü–æ—à—ë–ª –Ω–∞—Ö–µ—Ä. –•–∞—Ç—å —Ñ—É")
				return

			stats["need_to_buy"] = message
			await self.send_bot("–ü—Ä–µ–¥–º–µ—Ç—ã")
		elif (text == "!–ø–∏–Ω–≥"):
			await utils.answer(message, "–ñ–∏–≤, —Ü–µ–ª, –æ—Ä—ë–ª\n–ú–æ–π –∞–π–¥–∏ - " + stats.get("id"))

	async def timer(self):
		while True:
			if not self in self.allmodules.modules:
				logger.fatal("AutoLesya unloaded. Breaking timer.")
				break
			global stats
			global times
			now = time.time()
			if times.get("banned", None):
				if now > times.get("banned"):
					self.set_time("banned", 0)
					await self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å")
				await asyncio.sleep(1)
				continue

			if stats.get("captcha"):
				continue

			if not stats.get("has"):
				await self.send_bot("–ü—Ä–æ—Ñ–∏–ª—å")
				logger.info("no stats")
				await asyncio.sleep(1)
				continue

			stats["info"] = True

			# ÔøΩ –∞–±–æ—Ç–∞
			if not settings.get("no_work") and now > times.get("work") and stats.get("work"):
				logger.info("Time to Work")
				times["work"] = now + 30
				asyncio.ensure_future(self.send_bot("ÔøΩ –∞–±–æ—Ç–∞—Ç—å"))

			# –ë–æ–Ω—É—Å—ã
			if not settings.get("no_bonus"):
				if now > times.get("bonus"):
					print("Getting bonus")
					times["bonus"] = now + 600
					asyncio.ensure_future(self.send_bot("–ë–æ–Ω—É—Å"))
				if stats.get("vip") and now > times.get("vip_bonus"):
					print("Getting vip bonus")
					times["vip_bonus"] = now + 600
					asyncio.ensure_future(self.send_bot("–í–∏–ø –±–æ–Ω—É—Å"))
				if stats.get("premium") and now > times.get("premium_bonus"):
					print("Getting premium bonus")
					times["premium_bonus"] = now + 600
					asyncio.ensure_future(self.send_bot("–ü—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å"))
				if stats.get("premium") and now > times.get("premium_money"):
					print("Getting premium money")
					times["premium_money"] = now + 600
					asyncio.ensure_future(self.send_bot("–ü—Ä–µ–º–∏—É–º –≤–∞–ª—é—Ç–∞"))

			# –ê–≤—Ç–æ–∑–∞–∫—É–ø –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤
			if settings.get("pet_stimulator") and now > times.get("pet_stimulator"):
				self.set_time("pet_stimulator", now + 60 * 60 * 24)
				self.get_bitcoins()
				asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 6"))

			if settings.get("pet_food") and now > times.get("pet_food"):
				self.set_time("pet_food", now + 60 * 60 * 24)
				self.get_bitcoins()
				asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 7"))

			if settings.get("pet_cases") and now > times.get("pet_cases"):
				self.set_time("pet_cases", now + 60 * 60 * 24)
				self.get_bitcoins()
				asyncio.ensure_future(self.send_bot("–ó–æ–æ—Ç–æ–≤–∞—Ä—ã 8"))

			# –ê–≤—Ç–æ–±–æ–π
			if not settings.get("no_fight") and now > times.get("fight"):
				times["fight"] = now + 30
				logger.info("Starting new battle")
				asyncio.ensure_future(self.send_bot("–ë–æ–π"))

			if settings.get("clan_heist") and now > times.get("clan_heist"):
				times["clan_heist"] = now + 600
				asyncio.ensure_future(self.send_bot("–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ"))

			if settings.get("clan_war"):
				upgrade = times.get("clan_war_upgrade")
				if now > upgrade and upgrade != 0:
					asyncio.ensure_future(self.send_bot("–ö–≤"))
				elif now > times.get("clan_war"):
					times["clan_war"] = now + 600
					asyncio.ensure_future(self.send_bot("–ö–í"))

			# –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥ –≥–æ—Ä–æ–¥–∞ - –º–µ—Ç–æ–¥ –ø–æ–¥–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ –∏ –≤—ã–≤–æ–¥–∞ –≤ —Ç–æ–ø –∏ —Å–µ–±—è –∏ –∫–ª–∞–Ω–∞
			if settings.get("auto_trade") and now > times.get("trade"):
				times["trade"] = now + 5
				side = random.randint(0, 1) == 1 and "–≤–≤–µ—Ä—Ö" or "–≤–Ω–∏–∑"
				asyncio.ensure_future(self.send_bot("–¢—Ä–µ–π–¥ " + side + " –≤—Å–µ"))

			if settings.get("auto_cup") and now > times.get("cup"):
				times["cup"] = now + 5
				side = str(random.randint(1, 3))
				asyncio.ensure_future(self.send_bot("–°—Ç–∞–∫–∞–Ω—á–∏–∫ " + side + " –≤—Å–µ"))

			if settings.get("auto_casino") and now > times.get("casino"):
				times["casino"] = now + 5
				asyncio.ensure_future(self.send_bot("–ö–∞–∑–∏–Ω–æ –≤—Å–µ"))
			await asyncio.sleep(1)

	async def watcher(self, message):
		if not isinstance(message, types.Message):
			return
		if not message.text:
			return
		if times.get("banned", None):
			return
		if message.from_id == self._me.id:
			return
		chat_id = utils.get_chat_id(message)
		if chat_id == lesya:
			await self.receive(message)
		elif chat_id == lesya_chat:
			asyncio.ensure_future(self.receivechat(message))

	def db_set(self, key, value):
		self._db.set(__name__, key, value)

	def db_get(self, key, default=None):
		return self._db.get(__name__, key, default)
